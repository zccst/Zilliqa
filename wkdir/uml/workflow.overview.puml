@startuml

admin -> DS_node1_10: sendcmd,通知 node 1为DS lead，\nnode 2-10为DS lead backup


DS_node1_10 -> DS_node1_10: 等待普通节点的POW结果

node11_20 -> node11_20: 首次启动从配置文件读取DS信息
admin -> node11_20: sendcmd,通知 node 11-20 运行pow，\n竞争成为下一个DS lead

node11_20 -> node11_20: 运行pow1

node11_20 -> DS_node1_10: 发送pow1结果

DS_node1_10 -> DS_node1_10: 验证pow1的结果，并用BFT达成共识，确定:\n下一轮的DS lead和一个退出DS的节点

DS_node1_10 -> DS_node1_10: 将DS block写入磁盘记录：\n本轮和下一轮DS lead公钥(id)，难度值

DS_node1_10 -> node11_20: 广播，通知全网节点最新的DS的信息

node11_20 -> node11_20: 将DS block写入磁盘，运行pow2
node11_20 -> DS_node1_10: 发送pow2结果

DS_node1_10 -> DS_node1_10: 根据pow2结果，规划sharding

node11_20 <-- DS_node1_10: 通知如何sharding，以及各个sharding的lead

admin -> node11_20: sendtxn, 向 node 1-20 发送交易

node11_20 -> node11_20: 处理tx
node11_20 -> node11_20: 用BFT达成共识

node11_20 -> DS_node1_10: 发送micro block

DS_node1_10 -> DS_node1_10: 组装micro block,并用BFT达成共识，\n将final block写入磁盘

node11_20 <-- DS_node1_10: 发送final block
node11_20 -> node11_20: 将final block写入磁盘


@enduml

#set primary
for ds in {1..10}
do
    python tests/Zilliqa/test_zilliqa_local.py sendcmd $ds 01000000000000000000000000000100007F00001389
done
sleep 10

# PoW submission should be multicasted to all DS committee members
for node in {11..20}
do
    python tests/Zilliqa/test_zilliqa_local.py startpow $node 10 0000000000000001 03 2b740d75891749f94b6a8ec09f086889066608e4418eda656c93443e8310750a e8cc9106f8a28671d91e2de07b57b828934481fadf6956563b963bb8e5c266bf
done


for port in {5001..5020}
do
    python tests/Zilliqa/test_zilliqa_local.py sendtxn $port
done